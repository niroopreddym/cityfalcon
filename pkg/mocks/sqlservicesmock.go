// Code generated by MockGen. DO NOT EDIT.
// Source: sqlservices_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/niroopreddym/cityfalcon/pkg/models"
)

// MockISQLService is a mock of ISQLService interface.
type MockISQLService struct {
	ctrl     *gomock.Controller
	recorder *MockISQLServiceMockRecorder
}

// MockISQLServiceMockRecorder is the mock recorder for MockISQLService.
type MockISQLServiceMockRecorder struct {
	mock *MockISQLService
}

// NewMockISQLService creates a new mock instance.
func NewMockISQLService(ctrl *gomock.Controller) *MockISQLService {
	mock := &MockISQLService{ctrl: ctrl}
	mock.recorder = &MockISQLServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISQLService) EXPECT() *MockISQLServiceMockRecorder {
	return m.recorder
}

// DeleteBank mocks base method.
func (m *MockISQLService) DeleteBank(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBank", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBank indicates an expected call of DeleteBank.
func (mr *MockISQLServiceMockRecorder) DeleteBank(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBank", reflect.TypeOf((*MockISQLService)(nil).DeleteBank), id)
}

// GetAccountDetails mocks base method.
func (m *MockISQLService) GetAccountDetails(id string) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountDetails", id)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountDetails indicates an expected call of GetAccountDetails.
func (mr *MockISQLServiceMockRecorder) GetAccountDetails(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountDetails", reflect.TypeOf((*MockISQLService)(nil).GetAccountDetails), id)
}

// GetBankDetails mocks base method.
func (m *MockISQLService) GetBankDetails(uuid string) (*models.Bank, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankDetails", uuid)
	ret0, _ := ret[0].(*models.Bank)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankDetails indicates an expected call of GetBankDetails.
func (mr *MockISQLServiceMockRecorder) GetBankDetails(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankDetails", reflect.TypeOf((*MockISQLService)(nil).GetBankDetails), uuid)
}

// ListAllBanks mocks base method.
func (m *MockISQLService) ListAllBanks() ([]*models.Bank, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllBanks")
	ret0, _ := ret[0].([]*models.Bank)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllBanks indicates an expected call of ListAllBanks.
func (mr *MockISQLServiceMockRecorder) ListAllBanks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllBanks", reflect.TypeOf((*MockISQLService)(nil).ListAllBanks))
}

// PatchBankDetails mocks base method.
func (m *MockISQLService) PatchBankDetails(id string, bankDetails models.Bank) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchBankDetails", id, bankDetails)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchBankDetails indicates an expected call of PatchBankDetails.
func (mr *MockISQLServiceMockRecorder) PatchBankDetails(id, bankDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchBankDetails", reflect.TypeOf((*MockISQLService)(nil).PatchBankDetails), id, bankDetails)
}

// PostAccountDetails mocks base method.
func (m *MockISQLService) PostAccountDetails(bankDetails *models.Account) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostAccountDetails", bankDetails)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAccountDetails indicates an expected call of PostAccountDetails.
func (mr *MockISQLServiceMockRecorder) PostAccountDetails(bankDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAccountDetails", reflect.TypeOf((*MockISQLService)(nil).PostAccountDetails), bankDetails)
}

// PostBankDetails mocks base method.
func (m *MockISQLService) PostBankDetails(bankDetails *models.Bank) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostBankDetails", bankDetails)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostBankDetails indicates an expected call of PostBankDetails.
func (mr *MockISQLServiceMockRecorder) PostBankDetails(bankDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBankDetails", reflect.TypeOf((*MockISQLService)(nil).PostBankDetails), bankDetails)
}

// UpdateAccountDetails mocks base method.
func (m *MockISQLService) UpdateAccountDetails(id string, accDetails models.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountDetails", id, accDetails)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccountDetails indicates an expected call of UpdateAccountDetails.
func (mr *MockISQLServiceMockRecorder) UpdateAccountDetails(id, accDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountDetails", reflect.TypeOf((*MockISQLService)(nil).UpdateAccountDetails), id, accDetails)
}

// MockIBankDetails is a mock of IBankDetails interface.
type MockIBankDetails struct {
	ctrl     *gomock.Controller
	recorder *MockIBankDetailsMockRecorder
}

// MockIBankDetailsMockRecorder is the mock recorder for MockIBankDetails.
type MockIBankDetailsMockRecorder struct {
	mock *MockIBankDetails
}

// NewMockIBankDetails creates a new mock instance.
func NewMockIBankDetails(ctrl *gomock.Controller) *MockIBankDetails {
	mock := &MockIBankDetails{ctrl: ctrl}
	mock.recorder = &MockIBankDetailsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBankDetails) EXPECT() *MockIBankDetailsMockRecorder {
	return m.recorder
}

// DeleteBank mocks base method.
func (m *MockIBankDetails) DeleteBank(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBank", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBank indicates an expected call of DeleteBank.
func (mr *MockIBankDetailsMockRecorder) DeleteBank(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBank", reflect.TypeOf((*MockIBankDetails)(nil).DeleteBank), id)
}

// GetBankDetails mocks base method.
func (m *MockIBankDetails) GetBankDetails(uuid string) (*models.Bank, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankDetails", uuid)
	ret0, _ := ret[0].(*models.Bank)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankDetails indicates an expected call of GetBankDetails.
func (mr *MockIBankDetailsMockRecorder) GetBankDetails(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankDetails", reflect.TypeOf((*MockIBankDetails)(nil).GetBankDetails), uuid)
}

// ListAllBanks mocks base method.
func (m *MockIBankDetails) ListAllBanks() ([]*models.Bank, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllBanks")
	ret0, _ := ret[0].([]*models.Bank)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllBanks indicates an expected call of ListAllBanks.
func (mr *MockIBankDetailsMockRecorder) ListAllBanks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllBanks", reflect.TypeOf((*MockIBankDetails)(nil).ListAllBanks))
}

// PatchBankDetails mocks base method.
func (m *MockIBankDetails) PatchBankDetails(id string, bankDetails models.Bank) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchBankDetails", id, bankDetails)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchBankDetails indicates an expected call of PatchBankDetails.
func (mr *MockIBankDetailsMockRecorder) PatchBankDetails(id, bankDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchBankDetails", reflect.TypeOf((*MockIBankDetails)(nil).PatchBankDetails), id, bankDetails)
}

// PostBankDetails mocks base method.
func (m *MockIBankDetails) PostBankDetails(bankDetails *models.Bank) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostBankDetails", bankDetails)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostBankDetails indicates an expected call of PostBankDetails.
func (mr *MockIBankDetailsMockRecorder) PostBankDetails(bankDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBankDetails", reflect.TypeOf((*MockIBankDetails)(nil).PostBankDetails), bankDetails)
}

// MockIAccountDetails is a mock of IAccountDetails interface.
type MockIAccountDetails struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountDetailsMockRecorder
}

// MockIAccountDetailsMockRecorder is the mock recorder for MockIAccountDetails.
type MockIAccountDetailsMockRecorder struct {
	mock *MockIAccountDetails
}

// NewMockIAccountDetails creates a new mock instance.
func NewMockIAccountDetails(ctrl *gomock.Controller) *MockIAccountDetails {
	mock := &MockIAccountDetails{ctrl: ctrl}
	mock.recorder = &MockIAccountDetailsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccountDetails) EXPECT() *MockIAccountDetailsMockRecorder {
	return m.recorder
}

// GetAccountDetails mocks base method.
func (m *MockIAccountDetails) GetAccountDetails(id string) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountDetails", id)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountDetails indicates an expected call of GetAccountDetails.
func (mr *MockIAccountDetailsMockRecorder) GetAccountDetails(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountDetails", reflect.TypeOf((*MockIAccountDetails)(nil).GetAccountDetails), id)
}

// PostAccountDetails mocks base method.
func (m *MockIAccountDetails) PostAccountDetails(bankDetails *models.Account) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostAccountDetails", bankDetails)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAccountDetails indicates an expected call of PostAccountDetails.
func (mr *MockIAccountDetailsMockRecorder) PostAccountDetails(bankDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAccountDetails", reflect.TypeOf((*MockIAccountDetails)(nil).PostAccountDetails), bankDetails)
}

// UpdateAccountDetails mocks base method.
func (m *MockIAccountDetails) UpdateAccountDetails(id string, accDetails models.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountDetails", id, accDetails)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccountDetails indicates an expected call of UpdateAccountDetails.
func (mr *MockIAccountDetailsMockRecorder) UpdateAccountDetails(id, accDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountDetails", reflect.TypeOf((*MockIAccountDetails)(nil).UpdateAccountDetails), id, accDetails)
}
