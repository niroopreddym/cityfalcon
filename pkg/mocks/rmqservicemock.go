// Code generated by MockGen. DO NOT EDIT.
// Source: rabbitmqservices_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRMQService is a mock of IRMQService interface.
type MockIRMQService struct {
	ctrl     *gomock.Controller
	recorder *MockIRMQServiceMockRecorder
}

// MockIRMQServiceMockRecorder is the mock recorder for MockIRMQService.
type MockIRMQServiceMockRecorder struct {
	mock *MockIRMQService
}

// NewMockIRMQService creates a new mock instance.
func NewMockIRMQService(ctrl *gomock.Controller) *MockIRMQService {
	mock := &MockIRMQService{ctrl: ctrl}
	mock.recorder = &MockIRMQServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRMQService) EXPECT() *MockIRMQServiceMockRecorder {
	return m.recorder
}

// ConsumeMessage mocks base method.
func (m *MockIRMQService) ConsumeMessage(stopChan chan bool, errorChan chan error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ConsumeMessage", stopChan, errorChan)
}

// ConsumeMessage indicates an expected call of ConsumeMessage.
func (mr *MockIRMQServiceMockRecorder) ConsumeMessage(stopChan, errorChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeMessage", reflect.TypeOf((*MockIRMQService)(nil).ConsumeMessage), stopChan, errorChan)
}

// PublishMessage mocks base method.
func (m *MockIRMQService) PublishMessage(messageBody []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMessage", messageBody)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMessage indicates an expected call of PublishMessage.
func (mr *MockIRMQServiceMockRecorder) PublishMessage(messageBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMessage", reflect.TypeOf((*MockIRMQService)(nil).PublishMessage), messageBody)
}
